name: Deploy to OCI

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - plan
          - apply
          - destroy
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - development
          - staging
          - production

env:
  TF_VERSION: '1.6.0'
  WORKING_DIR: './oci'

jobs:
  terraform:
    name: 'Terraform ${{ github.event.inputs.action }} - OCI'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Create OCI private key file
        run: |
          mkdir -p ~/.oci
          echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/oci_api_key.pem
      
      - name: Create SSH key file
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub
          chmod 644 ~/.ssh/id_rsa.pub
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Validate
        run: terraform validate
      
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tfplan
        env:
          TF_VAR_tenancy_ocid: ${{ secrets.OCI_TENANCY_OCID }}
          TF_VAR_user_ocid: ${{ secrets.OCI_USER_OCID }}
          TF_VAR_fingerprint: ${{ secrets.OCI_FINGERPRINT }}
          TF_VAR_private_key_path: "~/.oci/oci_api_key.pem"
          TF_VAR_compartment_id: ${{ secrets.OCI_COMPARTMENT_ID }}
          TF_VAR_region: ${{ secrets.OCI_REGION }}
          TF_VAR_vscode_password: ${{ secrets.VSCODE_PASSWORD }}
          TF_VAR_ssh_public_key_path: "~/.ssh/id_rsa.pub"
          TF_VAR_environment: ${{ github.event.inputs.environment }}
        continue-on-error: true
      
      - name: Comment Plan on PR
        if: github.event_name == 'pull_request' && steps.plan.outcome == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Plan ðŸ“– \`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.WORKING_DIR }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: terraform apply -auto-approve tfplan
      
      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: terraform destroy -auto-approve
        env:
          TF_VAR_tenancy_ocid: ${{ secrets.OCI_TENANCY_OCID }}
          TF_VAR_user_ocid: ${{ secrets.OCI_USER_OCID }}
          TF_VAR_fingerprint: ${{ secrets.OCI_FINGERPRINT }}
          TF_VAR_private_key_path: "~/.oci/oci_api_key.pem"
          TF_VAR_compartment_id: ${{ secrets.OCI_COMPARTMENT_ID }}
          TF_VAR_region: ${{ secrets.OCI_REGION }}
          TF_VAR_vscode_password: ${{ secrets.VSCODE_PASSWORD }}
          TF_VAR_ssh_public_key_path: "~/.ssh/id_rsa.pub"
          TF_VAR_environment: ${{ github.event.inputs.environment }}
      
      - name: Output Terraform Results
        if: github.event.inputs.action == 'apply'
        run: terraform output -json > terraform-outputs.json
      
      - name: Upload Terraform Outputs
        if: github.event.inputs.action == 'apply'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-oci
          path: ${{ env.WORKING_DIR }}/terraform-outputs.json
          retention-days: 30
      
      - name: Cleanup credentials
        if: always()
        run: |
          rm -f ~/.oci/oci_api_key.pem
          rm -f ~/.ssh/id_rsa.pub
          rm -f tfplan
