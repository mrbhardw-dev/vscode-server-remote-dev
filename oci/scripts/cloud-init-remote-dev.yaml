#cloud-config
# =============================================================================
# CLOUD-INIT FOR VS CODE REMOTE DEVELOPMENT ENVIRONMENT
# =============================================================================
# Enhanced setup for professional remote development on Ubuntu 24.04
# Optimized for SSH-based VS Code Remote Development extension
# =============================================================================

package_update: true
package_upgrade: true

# Essential packages for development
packages:
  # System utilities
  - curl
  - wget
  - git
  - vim
  - neovim
  - tmux
  - screen
  - htop
  - btop
  - tree
  - jq
  - unzip
  - zip
  - build-essential
  - software-properties-common
  - apt-transport-https
  - ca-certificates
  - gnupg
  - lsb-release
  
  # Network tools
  - net-tools
  - netcat-openbsd
  - nmap
  - telnet
  - traceroute
  
  # Development dependencies
  - pkg-config
  - libssl-dev
  - libffi-dev
  - libsqlite3-dev
  - libbz2-dev
  - libreadline-dev
  - libncurses5-dev
  - libncursesw5-dev
  - xz-utils
  - tk-dev
  - libxml2-dev
  - libxmlsec1-dev
  - libffi-dev
  - liblzma-dev

# Users configuration
users:
  - name: developer
    groups: [sudo, docker]
    shell: /bin/zsh
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    ssh_authorized_keys:
      - ${ssh_public_key}

# SSH configuration
ssh_pwauth: false
disable_root: true

# Write configuration files
write_files:
  # Enhanced SSH configuration
  - path: /etc/ssh/sshd_config.d/99-remote-dev.conf
    content: |
      # Enhanced SSH configuration for remote development
      Port ${ssh_port}
      PermitRootLogin no
      PasswordAuthentication no
      PubkeyAuthentication yes
      AuthorizedKeysFile .ssh/authorized_keys
      ChallengeResponseAuthentication no
      UsePAM yes
      X11Forwarding yes
      ClientAliveInterval 300
      ClientAliveCountMax 2
      MaxStartups 10:30:100
      MaxSessions 10
    permissions: '0644'

  # Git global configuration
  - path: /home/developer/.gitconfig
    content: |
      [user]
          name = ${git_username}
          email = ${git_email}
      [init]
          defaultBranch = main
      [core]
          editor = vim
          autocrlf = input
          filemode = true
      [push]
          default = simple
          autoSetupRemote = true
      [pull]
          rebase = false
      [alias]
          st = status
          co = checkout
          br = branch
          ci = commit
          ca = commit -a
          ps = push
          pl = pull
          lg = log --oneline --graph --decorate
          lga = log --oneline --graph --decorate --all
          unstage = reset HEAD --
          last = log -1 HEAD
    permissions: '0644'
    owner: developer:developer

  # Zsh configuration
  - path: /home/developer/.zshrc
    content: |
      # Oh My Zsh configuration
      export ZSH="$HOME/.oh-my-zsh"
      ZSH_THEME="robbyrussell"
      
      plugins=(
        git
        docker
        docker-compose
        node
        npm
        python
        golang
        rust
        vscode
        sudo
        history
        colored-man-pages
        command-not-found
        zsh-autosuggestions
        zsh-syntax-highlighting
      )
      
      source $ZSH/oh-my-zsh.sh
      
      # Development aliases
      alias ll='ls -alF'
      alias la='ls -A'
      alias l='ls -CF'
      alias ..='cd ..'
      alias ...='cd ../..'
      alias grep='grep --color=auto'
      alias fgrep='fgrep --color=auto'
      alias egrep='egrep --color=auto'
      
      # Docker aliases
      alias dc='docker-compose'
      alias dcu='docker-compose up'
      alias dcd='docker-compose down'
      alias dcb='docker-compose build'
      
      # Git aliases
      alias gs='git status'
      alias ga='git add'
      alias gc='git commit'
      alias gp='git push'
      alias gl='git log --oneline'
      
      # Development environment
      export EDITOR=vim
      export VISUAL=vim
      export PATH="$HOME/.local/bin:$PATH"
      export PATH="$HOME/.cargo/bin:$PATH"
      export PATH="$HOME/go/bin:$PATH"
      
      # Node.js
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
      [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
      
      # Python
      export PYENV_ROOT="$HOME/.pyenv"
      export PATH="$PYENV_ROOT/bin:$PATH"
      if command -v pyenv 1>/dev/null 2>&1; then
        eval "$(pyenv init -)"
      fi
      
      # Welcome message
      echo "🚀 Remote Development Environment Ready!"
      echo "📁 Workspace: /workspace"
      echo "🔧 Tools: Docker, Node.js, Python, Go, Rust"
      echo "💻 VS Code: Connect via SSH Remote Development"
    permissions: '0644'
    owner: developer:developer

  # Development environment setup script
  - path: /tmp/setup-dev-env.sh
    content: |
      #!/bin/bash
      set -e
      
      echo "🚀 Setting up development environment..."
      
      # Update system
      apt-get update && apt-get upgrade -y
      
      # Install Docker
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
      apt-get update
      apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
      
      # Install Docker Compose standalone
      curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      chmod +x /usr/local/bin/docker-compose
      
      # Add developer to docker group
      usermod -aG docker developer
      
      # Install Node.js (via NodeSource)
      curl -fsSL https://deb.nodesource.com/setup_${nodejs_version}.x | bash -
      apt-get install -y nodejs
      
      # Install Yarn
      npm install -g yarn pnpm
      
      # Install Python build dependencies and pyenv
      sudo -u developer bash -c '
        curl https://pyenv.run | bash
        export PYENV_ROOT="/home/developer/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init -)"
        pyenv install ${python_version}
        pyenv global ${python_version}
        pip install --upgrade pip
        pip install pipenv poetry virtualenv
      '
      
      # Install Go
      GO_VERSION="${go_version}"
      wget "https://golang.org/dl/go$GO_VERSION.linux-$(dpkg --print-architecture | sed 's/arm64/arm64/' | sed 's/amd64/amd64/').tar.gz"
      tar -xzf "go$GO_VERSION.linux-"*.tar.gz -C /usr/local
      rm "go$GO_VERSION.linux-"*.tar.gz
      echo 'export PATH=$PATH:/usr/local/go/bin' >> /home/developer/.profile
      
      # Install Rust
      sudo -u developer bash -c 'curl --proto "=https" --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y'
      
      # Install Java
      apt-get install -y openjdk-${java_version}-jdk
      
      # Install Oh My Zsh for developer user
      sudo -u developer bash -c 'sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended'
      
      # Install Zsh plugins
      sudo -u developer git clone https://github.com/zsh-users/zsh-autosuggestions /home/developer/.oh-my-zsh/custom/plugins/zsh-autosuggestions
      sudo -u developer git clone https://github.com/zsh-users/zsh-syntax-highlighting.git /home/developer/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
      
      # Change default shell for developer
      chsh -s /bin/zsh developer
      
      # Install additional development tools
      apt-get install -y \
        postgresql-client \
        mysql-client \
        redis-tools \
        mongodb-clients
      
      # Install cloud tools
      curl -sL https://aka.ms/InstallAzureCLIDeb | bash
      
      # Install kubectl
      curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/$(dpkg --print-architecture | sed 's/arm64/arm64/' | sed 's/amd64/amd64/')/kubectl"
      install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      rm kubectl
      
      # Install Terraform
      wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
      echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list
      apt-get update && apt-get install -y terraform
      
      # Setup workspace directory
      mkdir -p /workspace
      chown developer:developer /workspace
      chmod 755 /workspace
      
      # Create symlink to workspace in developer home
      sudo -u developer ln -sf /workspace /home/developer/workspace
      
      # Install VS Code Server (for web access if needed)
      curl -fsSL https://code-server.dev/install.sh | sh
      
      # Configure firewall
      ufw allow ${ssh_port}/tcp
      ufw allow 80/tcp
      ufw allow 443/tcp
      ufw allow 3000/tcp
      ufw allow 8000/tcp
      ufw allow 8080/tcp
      ufw allow 9000/tcp
      echo "y" | ufw enable
      
      # Clean up
      apt-get autoremove -y
      apt-get autoclean
      
      echo "✅ Development environment setup complete!"
    permissions: '0755'

  # Workspace backup script
  - path: /usr/local/bin/backup-workspace.sh
    content: |
      #!/bin/bash
      BACKUP_DIR="/workspace/.backups"
      DATE=$(date +%Y%m%d_%H%M%S)
      BACKUP_NAME="workspace_backup_$DATE.tar.gz"
      
      mkdir -p "$BACKUP_DIR"
      
      # Create backup excluding .backups directory itself
      tar -czf "$BACKUP_DIR/$BACKUP_NAME" \
        --exclude="$BACKUP_DIR" \
        --exclude="node_modules" \
        --exclude=".git" \
        --exclude="__pycache__" \
        --exclude="*.log" \
        /workspace
      
      # Keep only last 7 backups
      cd "$BACKUP_DIR"
      ls -t workspace_backup_*.tar.gz | tail -n +8 | xargs -r rm
      
      echo "Backup created: $BACKUP_NAME"
    permissions: '0755'

# System configuration
runcmd:
  # Mount workspace volume if exists
  - |
    if [ -e /dev/sdb ]; then
      mkfs.ext4 /dev/sdb
      mkdir -p /workspace
      echo "/dev/sdb /workspace ext4 defaults,nofail 0 2" >> /etc/fstab
      mount /workspace
      chown developer:developer /workspace
    fi
  
  # Run development environment setup
  - bash /tmp/setup-dev-env.sh
  
  # Setup automatic backups
  - echo "0 2 * * * root /usr/local/bin/backup-workspace.sh" >> /etc/crontab
  
  # Enable and configure automatic security updates
  - apt-get install -y unattended-upgrades
  - dpkg-reconfigure -plow unattended-upgrades
  
  # Restart SSH with new configuration
  - systemctl restart ssh
  
  # Start and enable Docker
  - systemctl enable docker
  - systemctl start docker
  
  # Configure timezone
  - timedatectl set-timezone UTC
  
  # Log completion
  - echo "Remote development environment setup complete at $(date)" >> /var/log/remote-dev-setup.log

# Final message
final_message: |
  ========================================
  🚀 VS Code Remote Development Environment Ready!
  ========================================
  
  🔧 Installed Tools:
  - Docker & Docker Compose
  - Node.js ${nodejs_version} with npm/yarn/pnpm
  - Python ${python_version} with pyenv/pip/pipenv/poetry
  - Go ${go_version}
  - Rust (latest stable)
  - Java ${java_version}
  - Git with enhanced configuration
  - Zsh with Oh My Zsh
  
  📁 Workspace: /workspace (persistent storage)
  👤 Development User: developer
  🔑 SSH Port: ${ssh_port}
  
  🎯 VS Code Remote Development:
  1. Install "Remote - SSH" extension in VS Code
  2. Connect to: ssh developer@YOUR_PUBLIC_IP
  3. Open folder: /workspace
  
  🐳 Docker ready for containerized development
  📦 All major language runtimes installed
  🔒 Security configured with SSH keys only
  💾 Daily workspace backups enabled
  
  ========================================