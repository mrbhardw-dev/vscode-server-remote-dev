#!/bin/bash
# =============================================================================
# OCI Credentials Setup Helper Script
# =============================================================================
# This script helps you set up OCI authentication for Terraform
# Run this script to generate API keys and create terraform.tfvars template
# =============================================================================

set -e

echo "=============================================="
echo "OCI Credentials Setup for Terraform"
echo "=============================================="
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to prompt for input
prompt_input() {
    local prompt="$1"
    local var_name="$2"
    local default="$3"
    
    if [ -n "$default" ]; then
        read -p "$prompt [$default]: " value
        value="${value:-$default}"
    else
        read -p "$prompt: " value
    fi
    
    eval "$var_name='$value'"
}

# Function to prompt for sensitive input
prompt_sensitive() {
    local prompt="$1"
    local var_name="$2"
    
    read -sp "$prompt: " value
    echo ""
    eval "$var_name='$value'"
}

# Check if OCI directory exists
OCI_DIR="$HOME/.oci"
if [ ! -d "$OCI_DIR" ]; then
    echo -e "${YELLOW}Creating OCI directory: $OCI_DIR${NC}"
    mkdir -p "$OCI_DIR"
fi

# Check if API key already exists
API_KEY_PATH="$OCI_DIR/oci_api_key.pem"
API_KEY_PUBLIC_PATH="$OCI_DIR/oci_api_key_public.pem"

if [ -f "$API_KEY_PATH" ]; then
    echo -e "${YELLOW}API key already exists at: $API_KEY_PATH${NC}"
    read -p "Do you want to generate a new API key? (y/N): " generate_new
    generate_new="${generate_new:-n}"
else
    generate_new="y"
fi

if [[ "$generate_new" =~ ^[Yy]$ ]]; then
    echo ""
    echo "Generating new OCI API key pair..."
    
    # Generate private key
    openssl genrsa -out "$API_KEY_PATH" 2048 2>/dev/null
    
    # Generate public key
    openssl rsa -pubout -in "$API_KEY_PATH" -out "$API_KEY_PUBLIC_PATH" 2>/dev/null
    
    # Set permissions
    chmod 600 "$API_KEY_PATH"
    chmod 644 "$API_KEY_PUBLIC_PATH"
    
    echo -e "${GREEN}✓ API key pair generated successfully${NC}"
    echo ""
    echo "=============================================="
    echo "PUBLIC KEY (Upload this to OCI Console)"
    echo "=============================================="
    cat "$API_KEY_PUBLIC_PATH"
    echo "=============================================="
    echo ""
    echo -e "${YELLOW}IMPORTANT: Upload this public key to OCI Console:${NC}"
    echo "1. Go to: https://cloud.oracle.com/"
    echo "2. Click profile icon → User Settings"
    echo "3. Click 'API Keys' → 'Add API Key'"
    echo "4. Select 'Paste Public Key'"
    echo "5. Paste the public key shown above"
    echo "6. Click 'Add'"
    echo "7. Copy the Fingerprint that appears"
    echo ""
    read -p "Press Enter after you've uploaded the public key and copied the fingerprint..."
fi

echo ""
echo "=============================================="
echo "Enter OCI Configuration Details"
echo "=============================================="
echo ""
echo "You can find these values in OCI Console:"
echo "- Tenancy OCID: Profile icon → Tenancy"
echo "- User OCID: Profile icon → User Settings"
echo "- Fingerprint: User Settings → API Keys"
echo "- Compartment OCID: Identity & Security → Compartments"
echo ""

# Prompt for OCI details
prompt_input "Tenancy OCID" TENANCY_OCID
prompt_input "User OCID" USER_OCID
prompt_input "API Key Fingerprint (xx:xx:xx:...)" FINGERPRINT
prompt_input "Compartment OCID" COMPARTMENT_OCID "$TENANCY_OCID"
prompt_input "Region" REGION "us-phoenix-1"
echo ""
prompt_sensitive "VS Code Server Password (min 12 chars)" VSCODE_PASSWORD

# Optional configurations
echo ""
echo "=============================================="
echo "Optional Configuration (press Enter for defaults)"
echo "=============================================="
prompt_input "Instance Shape" INSTANCE_SHAPE "VM.Standard.A1.Flex"
prompt_input "Instance OCPUs (for Flex shapes)" INSTANCE_OCPUS "2"
prompt_input "Instance Memory in GBs" INSTANCE_MEMORY "12"
prompt_input "Boot Volume Size in GBs" BOOT_VOLUME_SIZE "100"
prompt_input "OS Type (ubuntu/oracle-linux)" OS_TYPE "ubuntu"
prompt_input "SSH Public Key Path" SSH_PUBLIC_KEY_PATH "~/.ssh/id_rsa.pub"

# Create terraform.tfvars
TFVARS_PATH="$(dirname "$0")/terraform.tfvars"

echo ""
echo "Creating terraform.tfvars file..."

cat > "$TFVARS_PATH" <<EOF
# =============================================================================
# OCI Terraform Configuration
# =============================================================================
# Generated by setup-credentials.sh on $(date)
# DO NOT COMMIT THIS FILE TO VERSION CONTROL
# =============================================================================

# -----------------------------------------------------------------------------
# OCI Authentication (REQUIRED)
# -----------------------------------------------------------------------------
tenancy_ocid     = "$TENANCY_OCID"
user_ocid        = "$USER_OCID"
fingerprint      = "$FINGERPRINT"
private_key_path = "$API_KEY_PATH"
compartment_id   = "$COMPARTMENT_OCID"
region           = "$REGION"

# -----------------------------------------------------------------------------
# Application Configuration (REQUIRED)
# -----------------------------------------------------------------------------
vscode_password = "$VSCODE_PASSWORD"

# -----------------------------------------------------------------------------
# Instance Configuration (OPTIONAL)
# -----------------------------------------------------------------------------
instance_shape          = "$INSTANCE_SHAPE"
instance_ocpus          = $INSTANCE_OCPUS
instance_memory_in_gbs  = $INSTANCE_MEMORY
boot_volume_size_in_gbs = $BOOT_VOLUME_SIZE
os_type                 = "$OS_TYPE"

# -----------------------------------------------------------------------------
# Security Configuration (OPTIONAL)
# -----------------------------------------------------------------------------
ssh_public_key_path = "$SSH_PUBLIC_KEY_PATH"

# Restrict SSH access to your IP (recommended)
# allowed_ssh_cidr = "YOUR_IP/32"

# -----------------------------------------------------------------------------
# Tags & Monitoring (OPTIONAL)
# -----------------------------------------------------------------------------
environment = "production"
project_name = "vscode-server"
enable_monitoring = true

# Additional tags
# freeform_tags = {
#   "Owner" = "Your Name"
#   "CostCenter" = "Engineering"
# }

# Notification email for alerts
# notification_email = "your-email@example.com"
EOF

chmod 600 "$TFVARS_PATH"

echo -e "${GREEN}✓ terraform.tfvars created successfully${NC}"
echo ""

# Verify SSH key exists
SSH_KEY_EXPANDED="${SSH_PUBLIC_KEY_PATH/#\~/$HOME}"
if [ ! -f "$SSH_KEY_EXPANDED" ]; then
    echo -e "${YELLOW}⚠ SSH public key not found at: $SSH_KEY_EXPANDED${NC}"
    echo ""
    echo "Generating SSH key pair..."
    ssh-keygen -t rsa -b 4096 -f "$HOME/.ssh/id_rsa" -N "" -C "oci-vscode-server"
    echo -e "${GREEN}✓ SSH key pair generated${NC}"
fi

# Summary
echo ""
echo "=============================================="
echo "Setup Complete!"
echo "=============================================="
echo ""
echo "Files created:"
echo "  - Private key: $API_KEY_PATH"
echo "  - Public key: $API_KEY_PUBLIC_PATH"
echo "  - Terraform vars: $TFVARS_PATH"
echo ""
echo "Next steps:"
echo "  1. Verify your credentials are correct"
echo "  2. Run: cd $(dirname "$0") && terraform init"
echo "  3. Run: terraform plan"
echo "  4. Run: terraform apply"
echo ""
echo -e "${GREEN}You're ready to deploy VS Code Server to OCI!${NC}"
echo ""

# Offer to run terraform init
read -p "Do you want to run 'terraform init' now? (y/N): " run_init
if [[ "$run_init" =~ ^[Yy]$ ]]; then
    echo ""
    cd "$(dirname "$0")"
    terraform init
    echo ""
    echo -e "${GREEN}✓ Terraform initialized${NC}"
    echo ""
    echo "Run 'terraform plan' to see what will be created."
fi
